import os
import logging
import boto3
import pandas as pd
import sklearn
from sklearn.preprocessing import MinMaxScaler
import pandas as pd
from sklearn.preprocessing import StandardScaler, LabelEncoder

# ---------------- CONFIG ----------------
AWS_ACCESS_KEY = os.getenv("AWS_ACCESS_KEY_ID", "AKIAXQTAFYM2MXFZS672")
AWS_SECRET_KEY = os.getenv("AWS_SECRET_ACCESS_KEY", "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")

SILVER_BUCKET = "churn-silver-layer-group16"
GOLD_BUCKET = "churn-gold-layer-group16"

VALIDATED_FILE_KEY = "data_validation/telecom_churn_data_validated.csv"
SCALING_FOLDER = "data_scaled/"

# ---------------- LOGGING ----------------
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

# ---------------- FUNCTIONS ----------------
def download_csv_from_s3(bucket, key):
    s3 = boto3.client("s3", aws_access_key_id=AWS_ACCESS_KEY, aws_secret_access_key=AWS_SECRET_KEY)
    obj = s3.get_object(Bucket=bucket, Key=key)
    return pd.read_csv(obj['Body'])

def scale_numeric_columns(df, numeric_cols):
    scaler = MinMaxScaler()
    df_scaled = df.copy()
    df_scaled[numeric_cols] = scaler.fit_transform(df[numeric_cols])
    return df_scaled

def process_categorical_dates(df):
    # Convert date columns to numeric features
    date_cols = [col for col in df.columns if "date" in col.lower()]
    for col in date_cols:
        df[col] = pd.to_datetime(df[col])
        df[col + "_days"] = (pd.Timestamp.today() - df[col]).dt.days
    df = df.drop(columns=date_cols)

    # Encode categorical columns
    cat_cols = df.select_dtypes(include="object").columns
    for col in cat_cols:
        le = LabelEncoder()
        df[col] = le.fit_transform(df[col].astype(str))
    return df

def upload_to_s3(local_file, bucket, key):
    s3 = boto3.client("s3", aws_access_key_id=AWS_ACCESS_KEY, aws_secret_access_key=AWS_SECRET_KEY)
    s3.upload_file(local_file, bucket, key)
    logging.info(f"Uploaded {local_file} → s3://{bucket}/{key}")

# ---------------- MAIN ----------------
if __name__ == "__main__":
    logging.info("Downloading validated dataset from Silver S3...")
    df_cleaned = download_csv_from_s3(SILVER_BUCKET, VALIDATED_FILE_KEY)

    logging.info("Processing categorical and date features...")
    df_cleaned = process_categorical_dates(df_cleaned)

    numeric_cols = df_cleaned.select_dtypes(include="number").columns.tolist()
    logging.info("Scaling numeric columns for Gold Layer...")
    df_scaled = scale_numeric_columns(df_cleaned, numeric_cols)

    scaled_file = "telecom_churn_data_scaled.csv"
    df_scaled.to_csv(scaled_file, index=False)
    logging.info(f"Scaled dataset saved locally as {scaled_file}")

    logging.info("Uploading scaled dataset to Gold S3...")
    upload_to_s3(scaled_file, GOLD_BUCKET, SCALING_FOLDER + scaled_file)
