import os
import logging
import boto3
import pandas as pd

# ---------------- CONFIG ----------------
AWS_ACCESS_KEY = os.getenv("AWS_ACCESS_KEY_ID", "AKIAXQTAFYM2MXFZS672")
AWS_SECRET_KEY = os.getenv("AWS_SECRET_ACCESS_KEY", "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")

BRONZE_BUCKET = "churn-bronze-layer-group16"
SILVER_BUCKET = "churn-silver-layer-group16"
KAGGLE_FILE_KEY = "raw_data/Kaggle/telecom_churn_data.csv"
VALIDATION_FOLDER = "data_validation/"

# ---------------- LOGGING ----------------
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

# ---------------- FUNCTIONS ----------------
def download_csv_from_s3(bucket, key):
    s3 = boto3.client("s3", aws_access_key_id=AWS_ACCESS_KEY, aws_secret_access_key=AWS_SECRET_KEY)
    obj = s3.get_object(Bucket=bucket, Key=key)
    return pd.read_csv(obj['Body'])

def validate_data(df):
    report = pd.DataFrame({
        "missing_values": df.isnull().sum(),
        "data_types": df.dtypes.astype(str),
        "negative_values": [
            df[col][df[col] < 0].count() if pd.api.types.is_numeric_dtype(df[col]) else 0
            for col in df.columns
        ]
    })
    report.loc["DUPLICATE_ROWS"] = [df.duplicated().sum(), "-", "-"]
    return report

def tag_high_value_and_churn(df, recharge_cols, thresh_quantile=0.7):
    df = df.copy()
    avg_recharge = df[recharge_cols[:2]].mean(axis=1)
    thresh = avg_recharge.quantile(thresh_quantile)
    df["high_value"] = (avg_recharge >= thresh).astype(int)
    is_zero_usage_9 = (
        (df["total_ic_mou_9"] == 0) &
        (df["total_og_mou_9"] == 0) &
        (df["vol_2g_mb_9"] == 0) &
        (df["vol_3g_mb_9"] == 0)
    )
    df["churn"] = is_zero_usage_9.astype(int)
    return df

def drop_churn_phase_columns(df, suffix="_9"):
    cols_to_drop = [col for col in df.columns if col.endswith(suffix)]
    return df.drop(columns=cols_to_drop)

def save_report(report_df, filename="data_validation_report.xlsx"):
    try:
        report_df.to_excel(filename)
        logging.info(f"Report saved locally as {filename}")
    except ModuleNotFoundError:
        filename = filename.replace(".xlsx", ".csv")
        report_df.to_csv(filename)
        logging.warning("Saved report as CSV (openpyxl not found)")
    return filename

def save_dataset(df, filename="telecom_churn_data_validated.csv"):
    df.to_csv(filename, index=False)
    logging.info(f"Cleaned dataset saved as {filename}")
    return filename

def upload_to_s3(local_file, bucket, key):
    s3 = boto3.client("s3", aws_access_key_id=AWS_ACCESS_KEY, aws_secret_access_key=AWS_SECRET_KEY)
    s3.upload_file(local_file, bucket, key)
    logging.info(f"Uploaded {local_file} → s3://{bucket}/{key}")

# ---------------- MAIN ----------------
if __name__ == "__main__":
    logging.info("Downloading raw churn dataset...")
    df = download_csv_from_s3(BRONZE_BUCKET, KAGGLE_FILE_KEY)

    logging.info("Generating validation report...")
    report_df = validate_data(df)

    logging.info("Tagging high-value customers & churners...")
    recharge_cols = [col for col in df.columns if "rech" in col.lower()]
    df = tag_high_value_and_churn(df, recharge_cols)

    logging.info("Removing churn-phase columns...")
    df_cleaned = drop_churn_phase_columns(df)

    logging.info("Saving validation report and cleaned dataset locally...")
    report_file = save_report(report_df)
    dataset_file = save_dataset(df_cleaned)

    logging.info("Uploading both to Silver S3...")
    upload_to_s3(report_file, SILVER_BUCKET, VALIDATION_FOLDER + os.path.basename(report_file))
    upload_to_s3(dataset_file, SILVER_BUCKET, VALIDATION_FOLDER + os.path.basename(dataset_file))
